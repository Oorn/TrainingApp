pipeline {
  agent any
  tools {
          maven 'default-maven'
          jdk 'default-jdk'
      }
  stages {
    stage('Build') {
        steps {
            sh 'mvn clean package'
        }
    }
    stage('SonarQube analysis') {
        environment {
          SCANNER_HOME = tool 'sonar-scanner'
        }
        steps {
        withSonarQubeEnv(credentialsId: '022985f2-255c-41a3-9c8a-56019b0bccdb', installationName: 'sonar-server') {
             sh '''$SCANNER_HOME/bin/sonar-scanner \
             -Dsonar.projectKey=projectKey \
             -Dsonar.projectName=projectName \
             -Dsonar.sources=src/ \
             -Dsonar.java.binaries=target/classes/,target/classes/ \
             -Dsonar.exclusions=src/test/java/****/*.java \
             -Dsonar.java.libraries=/var/lib/jenkins/.m2/**/*.jar \
             -Dsonar.projectVersion=${BUILD_NUMBER}-${GIT_COMMIT_SHORT}'''
           }
         }
    }
    stage('Sonar Quality Gate') {
         steps {
            timeout(time: 5, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: true
            }
         }
    }
    stage ('Archive') {
        steps {
            archiveArtifacts artifacts: '**/*.jar', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
        }
    }
    stage('Deploy') {
        steps {
            build wait: false, job: 'deploy'
        }
    }
  }
}
